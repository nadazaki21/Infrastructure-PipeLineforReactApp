version: 2.1

commands:

  destroy-enviroment:
    steps:
      - run:
          name: Destroy Enviroment 
          when: on_fail
          command: |
            
            aws cloudformation delete-stack --stack-name servers-${CIRCLE_WORKFLOW_ID:0:5}
            
            
  
 


jobs:

  get-current-workflow-id:
    docker:
      - image: amazon/aws-cli 
    steps:
      - run:
          name: Install tar 
          command: |
            yum install -y tar gzip
      - run:
              name: Get old stack workflow id and Save it
              command: |
                x=^WorkflowID
                export OldWorkflowID=$(aws cloudformation \
                        list-exports --query "Exports[?Name== ${x} ].Value"  --no-paginate --output text)

                      
                echo OldWorkflowID: "${OldWorkflowID}"
                echo Current_CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:5}"
                echo $OldWorkflowID > ~/OldWorkflowID.txt
                
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      
      - run: cat ~/OldWorkflowID.txt





  create-instances:
    docker:
      - image: amazon/aws-cli 
    environment:
      CI: false 
    steps:
      - checkout 
      - run : echo $CI
      - run:
          name: Create the instances  
          command: |
             aws cloudformation deploy --template-file servers.yml   --stack-name "servers-${CIRCLE_WORKFLOW_ID:0:5}"  --parameter-overrides  WorkflowID=${CIRCLE_WORKFLOW_ID:0:5}   --tags project=react 
      
      
      - destroy-enviroment

 


  confiugre-instaces:
    docker:
      - image: python:3.9-alpine3.16  #has no SSH 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "60:52:92:75:ac:a7:cf:e0:14:a2:05:59:97:92:22:51"
            

      - run:
          name: Install dependencies
          command: |
            apk add --no-cache tar gzip
            pip install ansible awscli
            apk add openssh-client
            
      - run:
          name: Add hosting Instace ip to ansible inventory
          command: |
           
           echo "[web]" > /root/project/inventory.txt
           aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'   --filters "Name=tag:Name,Values=ec2-${CIRCLE_WORKFLOW_ID:0:5}"    --output text >> /root/project/inventory.txt

      - run: cat /root/project/inventory.txt
      - run: pwd
      - run: ls -la 

      - save_cache:
          key: inv-dir
          paths: 
            - ~/inventory.txt
            
      - run:
          name: Configure server and install dependencies 
          command: |
            ansible-playbook -i /root/project/inventory.txt  /root/project/configure-server.yml
      
      - destroy-enviroment

      



  access-server: # test if web app is available on server 
    docker:
      - image: amazon/aws-cli 
     
    steps:
      - checkout 
      - run : 
          name: ensure that nginx is runnign successsfully with its default web-page.
          command: | 
           URL=$(aws ec2 describe-instances  --query 'Reservations[].Instances[].PublicDnsName'   --filters "Name=tag:Name,Values=ec2-${WorkflowID}" --output text) 
           echo ${URL}
           if curl -s ${URL} | grep "200"
            then
              echo "nginx is working successfully and web app is available "
                
              exit 0
            else
              exit 1
            fi


  



  build-app: #Produce node_modules and the 'Build' folder.
    docker:
      - image: circleci/node:13.8.0
    environment:
      CI: false 
    steps:
      - checkout
      - run : echo ${CI}

      - run:
          name: Install Ansible
          command: |
            sudo apt-get update 
            sudo apt install ansible 

      - run: ansible --version 
      - run:
          name: Install awscli
          command: |
            sudo apt install -y tar gzip
            echo "installing AWS CLI "
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run: pwd 
      - run: ls -la 

      - run:
          name: make sure that app files are available
          command: |
              ls -la /home/circleci/project


      
      - run: 
          name: Produce node_modules folder
          command: |
            cd /home/circleci/project/react-app/app
            npm install 
            ls -la 

      - run: 
          name: Produce build folder
          command: |
            
            cd /home/circleci/project/react-app/app
            npm run build
            ls -la 

      - save_cache:
          key: build-dir-r
          paths: 
            - /home/circleci/project/react-app/app/build

      - run: ls -la /home/circleci/project/react-app/app/build

      
      - destroy-enviroment
  




  configure-nginx:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "60:52:92:75:ac:a7:cf:e0:14:a2:05:59:97:92:22:51"
            
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update 
            sudo apt install ansible 

      - run: ansible --version 
      - run:
          name: Install dependencies
          command: |
            sudo apt install  tar gzip
            sudo apt install  awscli
            
      
      - restore_cache:
          keys: 
            - build-dir-r

      - run: ls -la /home/circleci/project/react-app/app/build
      
      - run: pwd 
      - run: ls -la


      - run:
          name: Add hosting Instace ip to ansible inventory
          command: |
            
            echo "[web]" > /home/circleci/project/inventory.txt
            aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'   --filters "Name=tag:Name,Values=ec2-${CIRCLE_WORKFLOW_ID:0:5}"    --output text >> /home/circleci/project/inventory.txt

      - run: cat /home/circleci/project/inventory.txt
      - run: pwd
      - run: ls -la 
      
            
      - run:
          name: Configure nginx 
          command: |
            ansible-playbook -i /home/circleci/project/inventory.txt  /home/circleci/project/configure-nginx.yml

     
      - destroy-enviroment

  
  


  smoke-test:  

    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: front end smoke test.
          command: |
            
            export DNS=$(aws elbv2 describe-load-balancers  --query LoadBalancers[*].DNSName --output text) 

            echo ${DNS}

            URL="http://${DNS}"

            echo ${URL}  
            if curl -s ${URL} | grep "200"
            then
              echo "Frontend is working successfully"
               
              exit 0
            else
              exit 1
            fi


      
      #- destroy-enviroment



  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      

      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      

      
      - attach_workspace:
          at: ~/
                
      - run:
          name: Remove old stacks and files
          command: |
              OldWorkflowID=$(cat ~/OldWorkflowID.txt)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
              echo "${OldWorkflowID}"
              echo " current workflow id : ${CIRCLE_WORKFLOW_ID:0:5}"      
              

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                echo "------------------ Deleting old Envirments ------------------"
                aws cloudformation delete-stack --stack-name servers-${OldWorkflowID}
            
                
              else
                echo "------------------ Nothing to Delete/Can't Delete ------------------"  
              fi
              



workflows:
  default:
    jobs:

      - get-current-workflow-id

      - create-instances:
          requires: [get-current-workflow-id]
    
      - confiugre-instaces:
          requires: [create-instances]
      - access-server:
          requires: [confiugre-instaces]
      - build-app
         
      - configure-nginx:
          requires: [confiugre-instaces , build-app ]

      
      # - smoke-test:
      #     requires: [configure-nginx]

      - cleanup: 
          requires: [ create-instances ]
     

      

      